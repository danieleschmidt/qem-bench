# Terragon Autonomous SDLC Value Discovery Configuration
# Repository: qem-bench (Quantum Error Mitigation Benchmark Suite)
# Maturity Level: MATURING (65% SDLC score)

repository:
  name: "qem-bench" 
  language: "python"
  framework: "scientific-python"
  maturity_level: "maturing"
  current_score: 65

scoring:
  weights:
    maturing:
      wsjf: 0.6          # Weighted Shortest Job First
      ice: 0.1           # Impact, Confidence, Ease
      technicalDebt: 0.2  # Technical debt reduction value
      security: 0.1       # Security improvement boost
  
  thresholds:
    minScore: 15         # Minimum composite score to execute
    maxRisk: 0.7         # Maximum acceptable risk (0-1)
    securityBoost: 2.0   # Multiplier for security-related work
    complianceBoost: 1.8 # Multiplier for compliance work
    
  boosts:
    quantum_computing: 1.3  # Domain-specific value boost
    performance: 1.2        # JAX/GPU optimization boost
    documentation: 0.9      # Lower priority for mature docs

discovery:
  sources:
    enabled:
      - gitHistory         # Parse commit messages and TODO comments
      - staticAnalysis     # Ruff, mypy, bandit output analysis
      - dependencyScanning # Safety, pip-audit vulnerability checks
      - performanceAnalysis # JAX profiling opportunities
      - testCoverage       # Pytest coverage gaps
      - codeComplexity     # Identify refactoring opportunities
      - securityScanning   # Bandit security issue detection
    
    intervals:
      gitHistory: "1h"     # Check every hour for new commits
      staticAnalysis: "4h" # Run comprehensive analysis every 4h
      security: "2h"       # Security scans every 2h
      dependencies: "24h"  # Daily dependency vulnerability check
  
  tools:
    staticAnalysis:
      - name: "ruff"
        config: "pyproject.toml" 
        weight: 0.3
      - name: "mypy"
        config: "pyproject.toml"
        weight: 0.2
      - name: "bandit" 
        args: ["-r", "src/"]
        weight: 0.5
    
    security:
      - name: "safety"
        command: "safety check"
        weight: 0.7
      - name: "pip-audit"
        command: "pip-audit" 
        weight: 0.3
    
    testing:
      - name: "pytest"
        coverage_target: 85
        mutation_testing: false  # Future enhancement
      
    performance:
      - name: "jax-profiler"
        enabled: true
        gpu_optimization: true

execution:
  constraints:
    maxConcurrentTasks: 1          # Serial execution for safety
    maxHoursPerTask: 4             # Prevent runaway tasks
    requiresTestPassing: true       # All tests must pass
    requiresLintPassing: true       # All linting must pass
    
  testRequirements:
    minCoverage: 80                # Minimum test coverage %
    performanceRegression: 5       # Max % performance regression
    securityRegression: 0          # Zero tolerance for security issues
    
  rollbackTriggers:
    - testFailure                  # Any test failure
    - buildFailure                 # Package build failure
    - lintFailure                  # Code quality failure
    - securityViolation           # New security issue
    - performanceRegression       # Significant performance drop

valueTracking:
  metrics:
    business:
      - research_velocity         # Scientific output acceleration
      - benchmark_accuracy        # Error mitigation effectiveness
      - hardware_compatibility    # Device support coverage
      - community_adoption        # Usage and contribution metrics
    
    technical: 
      - code_quality_score        # Combined linting + complexity
      - test_coverage_percent     # Test coverage improvement
      - security_vulnerability_count # Security issue reduction
      - performance_benchmarks    # JAX/GPU performance gains
      - technical_debt_hours      # Estimated maintenance savings
    
    operational:
      - build_success_rate        # CI/CD reliability
      - deployment_frequency      # Release cadence
      - incident_resolution_time  # Bug fix speed
      - developer_satisfaction    # DX improvement score

adaptiveWeights:
  # Weights automatically adjust based on repository evolution
  quantum_research_phase:
    wsjf: 0.7
    technicalDebt: 0.1
    performance: 0.2
  
  production_readiness_phase:
    wsjf: 0.4
    technicalDebt: 0.3 
    security: 0.2
    performance: 0.1

continuousLearning:
  enabled: true
  trackPredictionAccuracy: true
  adjustWeightsBasedOnOutcomes: true
  learningWindowDays: 30
  confidenceThreshold: 0.75