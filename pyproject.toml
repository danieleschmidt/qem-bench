[build-system]
requires = ["setuptools>=64", "wheel", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "qem-bench"
dynamic = ["version"]
description = "Comprehensive benchmark suite and JAX implementation for Quantum Error Mitigation techniques"
authors = [
    {name = "Daniel Schmidt", email = "daniel@example.com"},
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@example.com"},
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
keywords = [
    "quantum",
    "quantum-computing", 
    "error-mitigation",
    "benchmarking",
    "jax",
    "quantum-circuits"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "cryptography>=41.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
hardware = [
    "qiskit>=0.45.0",
    "qiskit-ibm-runtime>=0.15.0",
    "amazon-braket-sdk>=1.60.0",
    "cirq-google>=1.2.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "nbsphinx>=0.9.0",
    "pandoc>=2.0.0",
]
full = [
    "qem-bench[hardware,dev,docs]",
]

[project.scripts]
qem-bench = "qem_bench.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/qem-bench"
Documentation = "https://qem-bench.readthedocs.io"
Repository = "https://github.com/yourusername/qem-bench"
Issues = "https://github.com/yourusername/qem-bench/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["qem_bench*"]

[tool.setuptools_scm]
write_to = "src/qem_bench/_version.py"

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.tox
  | \.venv
  | \.ruff_cache
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[[tool.mypy.overrides]]
module = [
    "jax.*",
    "jaxlib.*",
    "qiskit.*", 
    "braket.*",
    "cirq.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=qem_bench",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "hardware: marks tests that require quantum hardware",
    "gpu: marks tests that require GPU acceleration",
]

[tool.coverage.run]
source = ["qem_bench"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/_version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]